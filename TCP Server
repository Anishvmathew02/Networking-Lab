#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<unistd.h>
#include<sys/socket.h>
#include<netinet/in.h>

#define MAX 80
#define PORT 8080
#define SA struct sockaddr

void func(int client_socket){
 char buff[MAX];
 int n;

 for(;;){
   bzero(buff, MAX);
   read(client_socket, buff, MAX);
   printf("From Client: %s",buff);
   if( strncmp(buff, "exit", 4) == 0 ){
     printf("Server exiting...\n");
     break;
   }
  
   n = 0;
   bzero(buff, MAX);
   printf("To Client: ");
   while((buff[n++] = getchar()) != '\n');
   write(client_socket, buff, MAX);
   if( strncmp(buff, "exit", 4) == 0 ){
     printf("Server exiting...\n");
     break;
   }
 }
}

int main(){
 int server_socket, client_socket, len;
 struct sockaddr_in server_address, client_address;

 server_socket = socket(AF_INET, SOCK_STREAM, 0);
 if(server_socket == -1){
   printf("Socket creation failed!!!\n");
   exit(0);
 }
 printf("Socket created...\n");

 bzero(&server_address, sizeof(server_address));
 server_address.sin_family = AF_INET;
 server_address.sin_addr.s_addr = htonl(INADDR_ANY);
 server_address.sin_port = htons(PORT);

 if(bind(server_socket, (SA *)&server_address, sizeof(server_address)) != 0){
   printf("Binding failed!!!\n");
   exit(0);
 }
 printf("Socket binded...\n");

 if( listen(server_socket, 5) !=0 ){
   printf("Listening failed!!!\n");
   exit(0);
 }
 printf("Server listening...\n");

 len = sizeof(client_address);
 client_socket = accept(server_socket, (SA *)&client_address, &len);
 if(client_socket < 0){
   printf("Server acceptance failed!!!\n");
   exit(0);
 }
 printf("Server accepted the client...\n");

 func(client_socket);
 close(client_socket);
 close(server_socket);
 return 0;
}
